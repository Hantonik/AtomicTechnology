buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

file('gradle.properties').withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

repositories {
    maven { url 'https://hantonikmods.jfrog.io/artifactory/mods' }
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    maven { url 'https://maven.tehnut.info' }
    maven { url 'https://maven.blamejared.com' }
}

version = "${config.mod_version}"
group = "hantonik.${config.mod_id}"
archivesBaseName = "${config.mod_name}-${config.mc_version}"

sourceSets {
    main {
        resources {
            srcDirs "src/generated/resources"

            exclude '.cache'
        }
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println "Starting build of ${config.mod_name}, Version: ${config.mod_version}"
println "Using Forge: ${config.forge_version}, for Minecraft: ${config.mc_version}, with Mappings: ${config.mappings_version}-${config.mappings_channel}\n"

minecraft {
    mappings channel: "${config.mappings_channel}", version: "${config.mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                atomictechnology {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                atomictechnology {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP,CORE'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'atomictechnology', '--all', '--output', file('src/generated/resources/')

            mods {
                atomictechnology {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"

    compileOnly fg.deobf('mcp.mobius.waila:Hwyla:1.10.11-B78_1.16.2:api')
    runtimeOnly fg.deobf('mcp.mobius.waila:Hwyla:1.10.11-B78_1.16.2')

    compileOnly fg.deobf('mezz.jei:jei-1.16.5:7.6.4.86:api')
    runtimeOnly fg.deobf('mezz.jei:jei-1.16.5:7.6.4.86')

    compile fg.deobf('slimeknights.mantle:Mantle:1.16.5-1.6.92')
    compile fg.deobf('slimeknights.tconstruct:TConstruct:1.16.5-3.0.2.96')

    compile fg.deobf('com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.0.203')

    compile fg.deobf('hantonik.atomiccore:AtomicCore-1.16.5:1.0.4')
}

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }

    from(sourceSets.main.resources.srcDirs) {
        include "META-INF/mods.toml"
        expand 'version': "$version", 'mod_name': "${config.mod_name}", 'core_version': "${config.core_version}"
    }

    into "$buildDir/resources/main/"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    finalizedBy replaceResources
}

jar {
    manifest {
        attributes([
                "Specification-Title": "$archivesBaseName",
                "Specification-Vendor": "Hantonik",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "$version",
                "Implementation-Vendor" :"Hantonik",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')